//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: UI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "UI.h"


// Declare the bitmap loading function
extern void wxC8968InitBitmapResources();

static bool bBitmapLoaded = false;


wxCrafterTabBase::wxCrafterTabBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC8968InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer2);
    
    m_auibar = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxAUI_TB_DEFAULT_STYLE);
    m_auibar->SetToolBitmapSize(wxSize(16,16));
    
    boxSizer2->Add(m_auibar, 0, wxEXPAND, 5);
    
    m_auibar->AddTool(ID_TOOL_NEW_RESOURCE, _("New Form..."), wxXmlResource::Get()->LoadBitmap(wxT("new-resource")), wxNullBitmap, wxITEM_NORMAL, _("Create New wxCrafter Project"), _("Create New wxCrafter Project"), NULL);
    m_auibar->Realize();
    
    m_treeCtrl = new wxTreeCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTR_DEFAULT_STYLE|wxTR_HIDE_ROOT);
    
    boxSizer2->Add(m_treeCtrl, 1, wxALL|wxEXPAND, 0);
    
    SetSizeHints(500,300);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(ID_TOOL_NEW_RESOURCE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(wxCrafterTabBase::OnNewWxCrafterFile), NULL, this);
    this->Connect(ID_TOOL_NEW_RESOURCE, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(wxCrafterTabBase::OnNewWxCrafterFileUI), NULL, this);
    m_treeCtrl->Connect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED, wxTreeEventHandler(wxCrafterTabBase::OnItemActivated), NULL, this);
    m_treeCtrl->Connect(wxEVT_COMMAND_TREE_ITEM_MENU, wxTreeEventHandler(wxCrafterTabBase::OnItemMenu), NULL, this);
    
}

wxCrafterTabBase::~wxCrafterTabBase()
{
    this->Disconnect(ID_TOOL_NEW_RESOURCE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(wxCrafterTabBase::OnNewWxCrafterFile), NULL, this);
    this->Disconnect(ID_TOOL_NEW_RESOURCE, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(wxCrafterTabBase::OnNewWxCrafterFileUI), NULL, this);
    m_treeCtrl->Disconnect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED, wxTreeEventHandler(wxCrafterTabBase::OnItemActivated), NULL, this);
    m_treeCtrl->Disconnect(wxEVT_COMMAND_TREE_ITEM_MENU, wxTreeEventHandler(wxCrafterTabBase::OnItemMenu), NULL, this);
    
}

wxcImages::wxcImages()
    : wxImageList(16, 16, true)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC8968InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("m_bmpWxCrafterLogo"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("m_bmpWxCrafterLogo"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("m_bmpFolder"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("m_bmpFolder"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("wxframe"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("wxframe"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("wxdialog"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("wxdialog"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("wxpanel"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("wxpanel"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("wxwizard"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("wxwizard"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("wxpopupwindow"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("wxpopupwindow"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("wximglist"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("wximglist"), bmp ) );
    }
    
}

wxcImages::~wxcImages()
{
}

NewWxCrafterFileDlgBase::NewWxCrafterFileDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC8968InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer36 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer36);
    
    wxFlexGridSizer* flexGridSizer44 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer44->SetFlexibleDirection( wxBOTH );
    flexGridSizer44->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer44->AddGrowableCol(1);
    
    boxSizer36->Add(flexGridSizer44, 1, wxALL|wxEXPAND, 5);
    
    m_staticText48 = new wxStaticText(this, wxID_ANY, _("Select Project:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer44->Add(m_staticText48, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceProjectsArr;
    m_choiceProjects = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_choiceProjectsArr, 0);
    m_choiceProjects->SetToolTip(_("Associate the wxCrafter project file to a project"));
    
    flexGridSizer44->Add(m_choiceProjects, 0, wxALL|wxEXPAND, 5);
    
    m_staticText52 = new wxStaticText(this, wxID_ANY, _("File name:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer44->Add(m_staticText52, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_filePicker = new wxFilePickerCtrl(this, wxID_ANY, wxEmptyString, wxT("Select a file"), wxT("*"), wxDefaultPosition, wxSize(-1,-1), wxFLP_USE_TEXTCTRL|wxFLP_OVERWRITE_PROMPT|wxFLP_SAVE);
    
    flexGridSizer44->Add(m_filePicker, 0, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer38 = new wxStdDialogButtonSizer();
    
    boxSizer36->Add(m_stdBtnSizer38, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_buttonOK = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOK->SetDefault();
    m_stdBtnSizer38->AddButton(m_buttonOK);
    
    m_button42 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer38->AddButton(m_button42);
    m_stdBtnSizer38->Realize();
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_choiceProjects->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(NewWxCrafterFileDlgBase::OnProjectSelected), NULL, this);
    m_buttonOK->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewWxCrafterFileDlgBase::OnButtonOKUI), NULL, this);
    
}

NewWxCrafterFileDlgBase::~NewWxCrafterFileDlgBase()
{
    m_choiceProjects->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(NewWxCrafterFileDlgBase::OnProjectSelected), NULL, this);
    m_buttonOK->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewWxCrafterFileDlgBase::OnButtonOKUI), NULL, this);
    
}
